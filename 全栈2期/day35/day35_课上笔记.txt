http://www.cnblogs.com/wupeiqi/articles/5713315.html      Python开发【第十七篇】：MySQL（一）

http://www.cnblogs.com/wupeiqi/articles/5713323.html      Python开发【第十八篇】：MySQL（二）

http://www.cnblogs.com/wupeiqi/articles/5729934.html      MySQL练习题

http://www.cnblogs.com/wupeiqi/articles/5716963.html      索引补充

一、数据库管理系统DBMS
        服务端和客户端
            mysql：
                add|asdfasd
            SqlServer:
                a|asdfasdf

二、下载安装

1、下载
2、解压到任意目录
3、服务器端运行起来
    初始化 mysqld
    mysqld
4、客户端连接

省事：
    将mysql服务端制作成一个Windows服务
    net start mysql
    net stop mysql 
    ===,打开服务管理，直接...
    
三、MySQL数据库

1、概念+++++++++++++++++++++++
    
    数据库:    文件夹
    数据库表:  文件
    数据行:    文件中的一行数据
    
2、启动连接+++++++++++++++++++
    启动服务器：
        net start mysql
        或
        C:\mysql-5.7.16-winx64\mysql-5.7.16-winx64\mysql
        mysql.server start 
        /etc/init.d/mysql start

    客户端连接：
        C:\mysql-5.7.16-winx64\mysql-5.7.16-winx64\mysql -u root -p 

        初试：
            
            show databases;             # 查看当前Mysql都有那些数据，根目录都有那些文件夹
            create database 数据库名;   # 创建文件夹
            use 数据库名;               # 使用选中数据库，进入目录
            show tables;                # 查看当前数据库下都有那些表，
            create table 表名(nid int,name varchar(20), pwd varchar(64)); # 创建数据库表
            select * from 表名;         # 查看表中的所有数据
            insert into 表名(nid,name,pwd) values(1,'alex','123');  # 插入数据
            -- select * from 表名;
        
3、用户授权+++++++++++++++++++
    用户管理特殊命令：
        创建用户
            create user '用户名'@'IP地址' identified by '密码';
        删除用户
            drop user '用户名'@'IP地址';
        修改用户
            rename user '用户名'@'IP地址'; to '新用户名'@'IP地址';;
        修改密码
            set password for '用户名'@'IP地址' = Password('新密码')
            
        c:\mysql-5.7.16-winx64\mysql-5.7.16-winx64\bin\mysql -u
        
4、权限+++++++++++++++++++++++
    默认，什么都没有

    grant  权限 on 数据库.表 to  '用户'@'IP地址'      -- 授权

    select,查

    数据库.表
        test.tb1
        test.*
        *.*

    '用户'@'IP地址'
        xiaohu@localhost

================================================================================================
============================================重要，远程连接=======================================
        
    a. 解放双手，在重复操作文件，直接将命令发送给mysql服务端，自动操作
    b. 数据库，表，行
    c. 开户和授权
        密码，必须用
        其他，推荐用
        
    d. 客户端连接（MySQL提供的客户端）
        1、 
            mysql -u root -h 192.168.1.1 -p
            # 输入密码

        2、
            初试：
                show databases;             # 查看当前Mysql都有那些数据，根目录都有那些文件夹
            
                create database 数据库名;   # 创建文件夹
                
                use 数据库名;               # 使用选中数据库，进入目录
                
                show tables;                # 查看当前数据库下都有那些表，
                
                create table 表名(nid int,name varchar(20), pwd varchar(64)); # 创建数据库表
                
                select * from 表名;         # 查看表中的所有数据
                
                insert into 表名(nid,name,pwd) values(1,'alex','123');  # 插入数据
                
                -- select * from 表名;
            
        3、 ；；；；；；；；；；
            
        
4、 SQL语句
    
    数据库级别---------------------------------------------------------------------------------
        SHOW DATABASES;
        
        CREATE DATABASE 数据库名称;
        CREATE DATABASE 数据库名称 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;
        
        USE 数据库名称;
        
        drop database 数据库名称;
        
    表级别------------------------------------------------------------------------------------
        show tables;
        desc tb1;
        select * from tbl;

        drop table tb1;     # 直接表删除
        delete from tb1;    # 清空表内容
        truncate table tb1; # 清空表内容，速度快，自增回到原点

        ***** create table tb1(id int, name varchar(10));
        # 事务，原子操作，回滚
        
        a. 默认值
        b. 是否可以为空
        c. 自增列（一张表只能有一个，为数字，必须是索引,一般设置为主键索引）
        d. 主键索引：
            一张表只能有一个主键，唯一不能重复，不能为null， 一般情况下，将自增列设置为主键
            1，2，3，4，5，6
            唯一索引：
                可以为null，一张表可以有多个唯一列
                1，2，3，4，5，6，null
            -- 约束
            -- 索引，加速查找
        
            create table xxx(
                nid.... primary key,
                ....
            )
            
            create table student(
                name varchar(10) not null,
                num  int not null,
                age int,
                gender int,
                primary key (name,num)       name和num两列联合起来做主键
            )
            约束：
                name num age
                 a   88   9
                 a   99   9
                 a   88   0
                 
            # 主键：
                不能为null，
                不能重复，
                一张表只有一个主键（可以多列组成主键）

            # 一般用法：
                nid int auto_increment primary key,
            
            # 请在本地创建表：
                CREATE DATABASE 数据库名称 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;
                use 数据库名称;

                create table tb5(
                    nid int not null auto_increment primary key,
                    name varchar(16),
                    age int default 19
                )engine=innodb default charset=utf8;
            
        e.  外键foreign key：一对多
            两张表建立约束
            -- 约束
            -- foreign key，一对多
                alter table userinfo add constraint fk_u_p foreign key userinfo(part_nid) references part(nid);
                alter                   ===>修改表结构
                add constraint          ===>增加约束
                fk_u_p                  ===>外键名
                userinfo(part_nid)      ===>userinfo表part_nid字段外链到part表nid字段
                references
                part(nid)               ===>userinfo表part_nid字段外链到part表nid字段

        f.  数据类型：数值、时间和字符串
            数值：
                二进制：
                    bit 二进制
                整数：
                    tinyint
                    smallint
                    int
                    bigint
                        - 范围不一样
                小数：
                    decimal --精确的
                            -- 985412154521321.857541245421245845
                    FLOAT   -- 98541215458798465465749465465465421321.857541245420000000
                            -- 985412154000000000000000000000000000000000000000000000000
                    DOUBLE  -- 9854121544587984654657494654654654000000000000000000000000
                
            字符串：
                # 定长   char
                    char
                    create table tb13(n char(7),b int, c int)     ====>7表示7个字符
                    insert ssss                 =========>插入4个字符也占7个字符位置
                    # 查找速度快，浪费空间
                # 变长   varchar
                    varchar
                    create table tb13(n varchar(7),b int, c int)  ====>7表示7个字符
                    insert ssss         ======>占4个字符位置
                    insert sssss        ======>占5个字符位置
                    insert sssss5       ======>占6个字符位置
                    # 查获找速度慢，节省空间

                    text
                    mediumtext
                    longtext

            二进制数据：
                TinyBlob、Blob、MediumBlob、LongBlob
                # 上传文件
                    # Blob,强制二进制方式
                    # varchar(65), "D:\av.avi" ========>将上传的文件保存在硬盘， D:\av.avi ;
                
            时间：
                DATE
                    YYYY-MM-DD（1000-01-01/9999-12-31）
                TIME
                    HH:MM:SS（'-838:59:59'/'838:59:59'）
                YEAR
                    YYYY（1901/2155）
                DATETIME
                    YYYY-MM-DD HH:MM:SS（1000-01-01 00:00:00/9999-12-31 23:59:59    Y）
                TIMESTAMP
                    YYYYMMDD HHMMSS（1970-01-01 00:00:00/2037 年某时）
                
            enum：
                单选
            
            集合：
                多选
            
        create table tb13(num decimal(6,2)) #8888.18

    数据行级别 *************************************--------------------------------------------------
        select * from tbl;
        
        # 增
            insert into tb1(name,age) values('alex', 18);
            insert into tb1(name,age) values('alex', 18),('eric', 19),('eric', 19);  插入多行数据
            insert into 表 (列名,列名...) select 列名,列名... from 表(两个表的字段类型不同，必须可以转换才行)
            
        # 删
            delete from 表
            delete from 表 where id＝1 and name＝'alex'
        # 改
            update 表 set name ＝ 'alex' where id>1
        # 查***************
            select * from 表
            select * from 表 where id > 1
            select nid,name,gender as gg from 表 where id > 1
        # 其他*************
            a、条件
                select * from 表 where id > 1 and name != 'alex' and num = 12;
                select * from 表 where id between 5 and 16;
                select * from 表 where id in (11,22,33)
                select * from 表 where id not in (11,22,33)
                select * from 表 where id in (select nid from 表)

            b、通配符(模糊匹配)
                select * from 表 where name like 'ale%'   - ale开头的所有（多个字符串）
                select * from 表 where name like 'ale_'   - ale开头的所有（一个字符）
                select * from 表 where name like '_ale%'  - ale开头的所有

            c、限制(分页)
                select * from 表 limit 5;            - 前5行
                select * from 表 limit 4,5;          - 从第4行开始的5行
                select * from 表 limit 5 offset 4    - 从第4行开始的5行

            d、排序
                select * from 表 order by 列 asc              - 根据 “列” 从小到大排列
                select * from 表 order by 列 desc             - 根据 “列” 从大到小排列
                select * from 表 order by 列1 desc,列2 asc    - 根据 “列1” 从大到小排列，如果相同则按列2从小到大排序

            e、分组
                select num from 表 group by num
                select num,nid from 表 group by num,nid
                select num,nid from 表  where nid > 10 group by num,nid order nid desc
                select num,nid,count(*),sum(score),max(score),min(score) from 表 group by num,nid

                select num from 表 group by num having max(id) > 10  对聚合条件进行筛选，要用having参数

                特别的：group by 必须在where之后，order by之前

            f、连表
                无对应关系则不显示
                select A.num, A.name, B.name
                from A,B
                Where A.nid = B.nid

                无对应关系则不显示
                select A.num, A.name, B.name
                from A inner join B
                on A.nid = B.nid

                A表所有显示，如果B中无对应关系，则值为null
                select A.num, A.name, B.name
                from A left join B
                on A.nid = B.nid

                B表所有显示，如果B中无对应关系，则值为null
                select A.num, A.name, B.name
                from A right join B
                on A.nid = B.nid

                # 连表
                select * form a,b where a.x = b.o

                # join,
                    a. left join
                        select * from a LEFT OUTER JOIN b ON a.x = b.o

                    b. inner join ,永远不会出现Null
                        select * from a inner JOIN b ON a.x = b.o
            g、组合
                组合，自动处理重合
                select nickname
                from A
                union
                select name
                from B

                组合，不处理重合
                select nickname
                from A
                union all
                select name
                from B

            
===========今日内容整理 ================
1、数据库概念，很多
2、数据库，表，行
3、启动服务器端，启动客户端连接服务端
    - 用户管理
    - 权限管理
4、SQL语句
    数据库操作 *
    表操作**
        - 是否可以为空
        - 默认值
        - 主键
        - 外键
        - 自增
        - 数据类型（char,varchar）
    数据行 ******：
        增删改查
        其他：
            limit offset
            left join
            order by
            group by ,having      max,min,sum,count
            # 条件，模糊，.....
        
    
    














        

    















                                                                                                                                                     