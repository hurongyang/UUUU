class Game(object):

    #类属性
    num = 0

    #实例方法
    def __init__(self):
        #实例属性
        self.name = "laowang"

    #类方法
    '''类方法至少有一个参数，cls用来接收类'''
    @classmethod
    def add_num(cls):#=============》类方法不写self，写cls(class的简写)，cls指向类
        cls.num = 100#可以直接操作类属性了

    #实例方法
    '''实例方法至少也有一个参数，self用来接收实例对象，而静态方法什么参数都不需要'''
    def LOL(self):
        pass

    #静态方法
    '''实际工作中开发程序，要么全用类，要么全用函数。那既有类又有函数怎么办呢，这样显得不伦不类。
                          这就用到静态方法：它既可以什么都不传（self也不需要），也可以传参数'''
    @staticmethod
    def print_menu():
        print("----------------------")
        print("    穿越火线V11.1")
        print(" 1. 开始游戏")
        print(" 2. 结束游戏")
        print("----------------------")

game = Game()

Game.add_num()#可以通过类的名字调用类方法
game.add_num()#还可以通过这个类创建出来的对象 去调用这个类方法

print(Game.num)

Game.print_menu()#通过类 去调用静态方法
game.print_menu()#通过实例对象 去调用静态方法

"""================================================================
总结：
    1、对类属性操作就用类方法
    2、对实例属性操作就用实例方法
    3、既和类对象没有关系，也和实例对象没有关系，那就用静态方法
"""