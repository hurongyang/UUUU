装饰器=====================================================================================================
定义：
      本质   是函数
      功能  （装饰其他函数）就是为其他函数添加附加功能
原则：
      1.不能修改被装饰的函数的源代码
      2.被装饰的函数的调用方式不能被修改
实现装饰器知识储备：
1.函数即"变量"
2.高阶函数
    a:把一个函数名当做实参传给另外一个函数（在不修改函数源代码的情况下为其添加功能，
         但是不同于装饰器，因为这种高阶函数改变了函数调用方式）
    b:返回值中包含函数名(不修改函数的调用方式)
3.嵌套函数
    在一个函数体里用def声明一个新函数，而不是调用

***高阶函数+嵌套函数==》装饰器


迭代器=====================================================================================================
定义：
    ***可以直接作用于for循环的对象统称为可迭代对象
        一是集合类数据类型：如list、tuple、dict、set、str等
        二是generator,包括生成器和带yield的generator function
    ***可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator

    生成器一定是迭代器，迭代器不一定是生成器

    迭代器是访问集合元素的一种方式。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退，
    不过这也没什么，因为人们很少在迭代途中往后退。另外，迭代器的一大优点是不要求事先准备好整个迭代过程中所有的元素。迭代器仅仅
    在迭代到某个元素时才计算该元素，而在这之前或之后，元素可以不存在或者被销毁。这个特点使得它特别适合用于遍历一些巨大的或是无
    限的集合，比如几个G的文件
特点：
    访问者不需要关心迭代器内部的结构，仅需通过next()方法不断去取下一个内容
    不能随机访问集合中的某个值 ，只能从头到尾依次访问
    访问到一半时不能往回退
    便于循环比较大的数据集合，节省内存


生成器======================================================================================================
定义：一个函数调用时返回一个迭代器，那这个函数就叫做生成器（generator），如果函数中包含yield语法，那这个函数就会变成生成器。
作用：这个yield的主要效果呢，就是可以使函数中断，并保存中断状态，中断后，代码可以继续往下执行，过一段时间还可以再重新调用
      这个函数，从上次yield的下一句开始执行。

    (i*i for i in range(10))。
    生成器只有在调用时才会生成相应的数据，只记录当前的位置。
    生成器只有一个__next__()方法，一个个的往后取数据（往前取也不可以）。
    next方法很少用，一般都是用for循环迭代。